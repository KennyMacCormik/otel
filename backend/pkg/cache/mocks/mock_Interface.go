// Code generated by mockery v2.51.1. DO NOT EDIT.

package cache

import (
	context "context"

	mock "github.com/stretchr/testify/mock"
)

// MockInterface is an autogenerated mock type for the Interface type
type MockInterface struct {
	mock.Mock
}

type MockInterface_Expecter struct {
	mock *mock.Mock
}

func (_m *MockInterface) EXPECT() *MockInterface_Expecter {
	return &MockInterface_Expecter{mock: &_m.Mock}
}

// Close provides a mock function with given fields: ctx
func (_m *MockInterface) Close(ctx context.Context) error {
	ret := _m.Called(ctx)

	if len(ret) == 0 {
		panic("no return value specified for Close")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context) error); ok {
		r0 = rf(ctx)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockInterface_Close_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Close'
type MockInterface_Close_Call struct {
	*mock.Call
}

// Close is a helper method to define mock.On call
//   - ctx context.Context
func (_e *MockInterface_Expecter) Close(ctx interface{}) *MockInterface_Close_Call {
	return &MockInterface_Close_Call{Call: _e.mock.On("Close", ctx)}
}

func (_c *MockInterface_Close_Call) Run(run func(ctx context.Context)) *MockInterface_Close_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context))
	})
	return _c
}

func (_c *MockInterface_Close_Call) Return(_a0 error) *MockInterface_Close_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockInterface_Close_Call) RunAndReturn(run func(context.Context) error) *MockInterface_Close_Call {
	_c.Call.Return(run)
	return _c
}

// Delete provides a mock function with given fields: ctx, key
func (_m *MockInterface) Delete(ctx context.Context, key string) error {
	ret := _m.Called(ctx, key)

	if len(ret) == 0 {
		panic("no return value specified for Delete")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string) error); ok {
		r0 = rf(ctx, key)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockInterface_Delete_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Delete'
type MockInterface_Delete_Call struct {
	*mock.Call
}

// Delete is a helper method to define mock.On call
//   - ctx context.Context
//   - key string
func (_e *MockInterface_Expecter) Delete(ctx interface{}, key interface{}) *MockInterface_Delete_Call {
	return &MockInterface_Delete_Call{Call: _e.mock.On("Delete", ctx, key)}
}

func (_c *MockInterface_Delete_Call) Run(run func(ctx context.Context, key string)) *MockInterface_Delete_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string))
	})
	return _c
}

func (_c *MockInterface_Delete_Call) Return(_a0 error) *MockInterface_Delete_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockInterface_Delete_Call) RunAndReturn(run func(context.Context, string) error) *MockInterface_Delete_Call {
	_c.Call.Return(run)
	return _c
}

// Get provides a mock function with given fields: ctx, key
func (_m *MockInterface) Get(ctx context.Context, key string) (any, error) {
	ret := _m.Called(ctx, key)

	if len(ret) == 0 {
		panic("no return value specified for Get")
	}

	var r0 any
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string) (any, error)); ok {
		return rf(ctx, key)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) any); ok {
		r0 = rf(ctx, key)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(any)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, key)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockInterface_Get_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Get'
type MockInterface_Get_Call struct {
	*mock.Call
}

// Get is a helper method to define mock.On call
//   - ctx context.Context
//   - key string
func (_e *MockInterface_Expecter) Get(ctx interface{}, key interface{}) *MockInterface_Get_Call {
	return &MockInterface_Get_Call{Call: _e.mock.On("Get", ctx, key)}
}

func (_c *MockInterface_Get_Call) Run(run func(ctx context.Context, key string)) *MockInterface_Get_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string))
	})
	return _c
}

func (_c *MockInterface_Get_Call) Return(_a0 any, _a1 error) *MockInterface_Get_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockInterface_Get_Call) RunAndReturn(run func(context.Context, string) (any, error)) *MockInterface_Get_Call {
	_c.Call.Return(run)
	return _c
}

// GetKeys provides a mock function with given fields: ctx
func (_m *MockInterface) GetKeys(ctx context.Context) ([]string, error) {
	ret := _m.Called(ctx)

	if len(ret) == 0 {
		panic("no return value specified for GetKeys")
	}

	var r0 []string
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context) ([]string, error)); ok {
		return rf(ctx)
	}
	if rf, ok := ret.Get(0).(func(context.Context) []string); ok {
		r0 = rf(ctx)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]string)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context) error); ok {
		r1 = rf(ctx)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockInterface_GetKeys_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetKeys'
type MockInterface_GetKeys_Call struct {
	*mock.Call
}

// GetKeys is a helper method to define mock.On call
//   - ctx context.Context
func (_e *MockInterface_Expecter) GetKeys(ctx interface{}) *MockInterface_GetKeys_Call {
	return &MockInterface_GetKeys_Call{Call: _e.mock.On("GetKeys", ctx)}
}

func (_c *MockInterface_GetKeys_Call) Run(run func(ctx context.Context)) *MockInterface_GetKeys_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context))
	})
	return _c
}

func (_c *MockInterface_GetKeys_Call) Return(_a0 []string, _a1 error) *MockInterface_GetKeys_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockInterface_GetKeys_Call) RunAndReturn(run func(context.Context) ([]string, error)) *MockInterface_GetKeys_Call {
	_c.Call.Return(run)
	return _c
}

// GetLength provides a mock function with no fields
func (_m *MockInterface) GetLength() (int, error) {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for GetLength")
	}

	var r0 int
	var r1 error
	if rf, ok := ret.Get(0).(func() (int, error)); ok {
		return rf()
	}
	if rf, ok := ret.Get(0).(func() int); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(int)
	}

	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockInterface_GetLength_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetLength'
type MockInterface_GetLength_Call struct {
	*mock.Call
}

// GetLength is a helper method to define mock.On call
func (_e *MockInterface_Expecter) GetLength() *MockInterface_GetLength_Call {
	return &MockInterface_GetLength_Call{Call: _e.mock.On("GetLength")}
}

func (_c *MockInterface_GetLength_Call) Run(run func()) *MockInterface_GetLength_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockInterface_GetLength_Call) Return(_a0 int, _a1 error) *MockInterface_GetLength_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockInterface_GetLength_Call) RunAndReturn(run func() (int, error)) *MockInterface_GetLength_Call {
	_c.Call.Return(run)
	return _c
}

// Set provides a mock function with given fields: ctx, key, value
func (_m *MockInterface) Set(ctx context.Context, key string, value any) error {
	ret := _m.Called(ctx, key, value)

	if len(ret) == 0 {
		panic("no return value specified for Set")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string, any) error); ok {
		r0 = rf(ctx, key, value)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockInterface_Set_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Set'
type MockInterface_Set_Call struct {
	*mock.Call
}

// Set is a helper method to define mock.On call
//   - ctx context.Context
//   - key string
//   - value any
func (_e *MockInterface_Expecter) Set(ctx interface{}, key interface{}, value interface{}) *MockInterface_Set_Call {
	return &MockInterface_Set_Call{Call: _e.mock.On("Set", ctx, key, value)}
}

func (_c *MockInterface_Set_Call) Run(run func(ctx context.Context, key string, value any)) *MockInterface_Set_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(any))
	})
	return _c
}

func (_c *MockInterface_Set_Call) Return(_a0 error) *MockInterface_Set_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockInterface_Set_Call) RunAndReturn(run func(context.Context, string, any) error) *MockInterface_Set_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockInterface creates a new instance of MockInterface. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockInterface(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockInterface {
	mock := &MockInterface{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
